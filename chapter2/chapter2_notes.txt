scalar vector multiplcation is distributive.  this means 2[3,4] = [2*3, 2*4]
addition is just like addition  in the complex plane.
need a good analogy for vectors.  I know one definition is a force and a distance.  if they are functions,
then they are not the input or the output, but rather the function itself.  given any input or output, here is what
would happen. another good one could be as a carrier.  give it something and it will carry it somewhere

scalars distribute like this: (A+B)u = Au + Bu this makes sese and if you give it any real numbers
it works.  These two are EQUAL.  Same way of saying the exact same thing, and useful for solving problems as well,
in the situation where A or B is unknown.  if both are known, just add them.

turns out the work i did yesterday was correct, but, i could have done it more simply, by just subtracting the closer
vector from the farther one.  this is the slope of the line, (over how many, up how many), and also
gives the length of the line from the origin, so then we just have to translate it back up by the
original amount we subtracted after applying the scalar from 0 to 1 to our new translated vector.

A couple things to remember: a) I am NOT being tested on this.  I can learn at my own pace and dive deep.
I have all the time in the world to focus, understand, and learn in a mode of curioisty and process rather
than production.  Like learning Spanish, it will start to sink in and I'll get better at the
language.  Rn i struggle to speak and understand, but it's getting easier.

He's a sneaky sneaky, adding assumed 1s for scalars.  this allows us to get a line segment that
specifies both endpoints, where Au + Bv where a,b <= 1 and a+b = 1 this is called a convex combination.  How to get there is on page
78 and it's pretty cool, requiring some algebra.  Algebra is a bit like untying a knot.

Affine combination is a convex combination where alpha and beta can be outside the range 0, 1 but still add up to 1
This makes an infinite line segment.

What we're doing here with line segments using convex/affine combinations is drawing a series of vectors of different
lengths between the two end points, and the convex combination relationship of alha + beta == 1 allows us to "average" the two vectors.

VIm notes:  /puts you in find mode which is amazing.  n moves you forward and N back, or if you type ? instead of
/ you by default look from where you are up, so N moves you down and n up.
AAAlso, when moving around in a file, ctrl+g takes you to moving mode, and then if you hit G you go to the bottom, gg to the top, and
line number + G back to your original spot.

dict note: you can add items to a dict without erasing the original dict.  here's how that looks:
d= {1:2}
d[1]
2
d[1]= d[1], 3
>d
{1:(2,3)}

dont' know how to access keys from dicts, or keys from lists to put those names into a list of the subset that makes up the answer
with my test equality function had a funny thing happen which was that I put an else in as True within a for loop,
so I kept getting different outputs based on which dict key the function chose to evaluate first.
Took the return True outside the for loop and works like a charm.
Things learned 6/22:
assert x in y or assert x == y #this raises an assertion error if false.  nicer than returning False or True
enumerate a list returns the index of the list along iwth it;s value
don't quite get how we're using our vecs with normal operators as opposed to functions.  must look that up.
reading other people's code is very helpful.  gotta make sure it's good though.

learned 6/23/18: he's doing something funky naming functions def __func__ which allows him
to use normal operators instead of calling them.  this is very cool in the context of a command line user interface.
line interface.

if you define a bunch of functions in the same file as a class definition you can use the class above its definition.  
